# -*- coding: utf-8 -*-
"""ARIMA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17ja6uedsChZ0tXMVHMm-VnT78iU0Vu0u
"""

!pip install pandas_ta

!pip install backtesting

import pandas as pd
import pandas_ta as ta
import requests
import numpy as np
import matplotlib.pyplot as plt
import datetime as dt
import backtesting as bt

key = 'XXXXXX'
url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=ACGL&outputsize=full&apikey={key}&datatype=csv'

df = pd.read_csv(url)
df = pd.DataFrame(df)
display(df.head())

df_dup = df.copy()
df_dup['timestamp'] = pd.to_datetime(df_dup['timestamp'])
df_dup.set_index('timestamp', inplace = True)
df_dup.tail()

df_dup = df_dup[((df_dup.index >= pd.to_datetime('2012-01-01')) & (df_dup.index <= pd.to_datetime('2018-01-01')))]

plt.figure(figsize = (10, 6))
plt.grid(True)
plt.xlabel('Date')
plt.ylabel('Price')
plt.plot(df_dup['close'])
plt.title('Google Stock Closing Price')
plt.show()

#First we need to check if this time series data is stationary , since time series works well with stationary data
#Use Augmented Dickey Fuller test , if p<0.05 then reject H0 and say that data is stationary

#Checking for Stationarity
from statsmodels.tsa.stattools import adfuller

def CheckStationarity(df):
  stats = adfuller(df)
  #print(result)
  #print('ADF Statistic: %f' % result[0])
  #print('p-value: %f' % result[1])
  output = pd.Series(stats[0:4], index = ['Test Statistic' , 'p-value' , '#Lags Used' , 'Number of Observations Used'])
  print(output)


CheckStationarity(df_dup['close'])

#We try to decompose the data into different components of time series - trend, seasonal, and residual
from statsmodels.tsa.seasonal import seasonal_decompose

result = seasonal_decompose(df_dup['close'], model = 'additive', period = 30)
result.plot()
plt.figure(figsize = (14, 8))
plt.show()

#Since p-val > 0.05 , we DO NOT reject Ho and conclude that our data is NOT stationary
#So to make it stationary we take the log of the close and try to reduce the skewness
#df.close/df.close.shift(1) : basically shift(1) moves the data by 1 period down, and now df.close/df.close.shift is basically the return of new period compared to older period. We then take log of this value.

# df_dup['log close'] = np.log(df_dup['close']/df_dup['close'].shift(1))
#df_dup['log close'] = np.log(df_dup['close'])
df_dup = np.log(df_dup/df_dup.shift(1))

df_dup.dropna(inplace = True)
df_dup.head()

plt.figure(figsize = (10, 6))
plt.grid(True)
plt.xlabel('Date')
plt.ylabel('Price')
plt.plot(df_dup['close'])
plt.title('Google Stock Closing Price')
plt.show()

#Now check this transformed data with the Augmented Dickey Fuller test
CheckStationarity(df_dup['close'])

df_log = df_dup.copy()
df_log.drop(['open', 'high', 'low', 'volume'], axis = 1, inplace = True)
df_log.head()
# df_log.rev

#Now the p-val <0.05 , so the data is statioanry
#split data to train and test

train_data, test_data = df_log[int(len(df_log)*0.1):], df_log[:int(len(df_log)*0.1)]
plt.figure(figsize=(10,6))
plt.grid(True)
plt.xlabel('Dates')
plt.ylabel('Closing Prices')
plt.plot(df_log, 'green', label='Train data')
plt.plot(test_data, 'blue', label='Test data')
plt.legend()

!pip install pmdarima

#We now use Auto Arima to find the best fit paraemeters of p,d,q
from statsmodels.tsa.arima_model import ARIMA
from pmdarima.arima import auto_arima

model_auto = auto_arima(train_data, start_p=0, start_q=0,
                        test='adf',       # use adftest to find optimal 'd'
                        max_p=3, max_q=3, # maximum p and q
                        m=1,              # frequency of series
                        d=None,           # let model determine 'd'
                        seasonal=False,   # No Seasonality
                        start_P=0,
                        D=0,
                        trace=True,
                        error_action='ignore',
                        suppress_warnings=True,
                        stepwise=True)
print(model_auto.summary())
model_auto.plot_diagnostics(figsize=(9,7))
plt.show()