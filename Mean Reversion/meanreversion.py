# -*- coding: utf-8 -*-
"""MeanReversion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-4EB2PUB8jdyFcmcbIqQw6PvIYx2nL-t
"""

!pip install pandas_ta

!pip install backtesting

import pandas as pd
import pandas_ta as ta
import requests
import numpy as np
import matplotlib.pyplot as plt
import datetime as dt
import backtesting as bt

key = 'XXXXX'

url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=TSLA&outputsize=full&apikey={key}&datatype=csv'

df = pd.read_csv(url)
df = pd.DataFrame(df)
display(df.head())

df_dup = df.copy()
df_dup['timestamp'] = pd.to_datetime(df_dup['timestamp'])
df_dup.set_index('timestamp', inplace = True)
df_dup.tail()

#convert timestamp field to datetime field
df['timestamp'] = pd.to_datetime(df['timestamp'])
df.tail()

#filter data to last 2 years only
df = df[df['timestamp'] >= dt.datetime(2023,1,1)]
df.tail()

#calculate moving averages
df['ma_20'] = df['close'].rolling(20).mean()
df['ma_50'] = df['close'].rolling(50).mean()
df.tail()

plt.figure(figsize=(10,5))
plt.plot(df['timestamp'], df['close'], label = 'Close')
plt.plot(df['timestamp'], df['ma_20'], label = 'Moving average')
plt.legend()
plt.show()

#setup the bollinger bands
period = 20
df['std'] = df['close'].rolling(period).std()
df['bb_upper'] = df['ma_20'] + (2 * df['std'])
df['bb_lower'] = df['ma_20'] - (2 * df['std'])
df.tail()

plt.figure(figsize=(12,8))
plt.plot(df['timestamp'], df['close'], label = 'Close')
plt.plot(df['timestamp'], df['ma_20'], label = 'Moving average')
#plt.plot(df['timestamp'], df['bb_upper'], df['bb_lower'], label = 'Bollinger band')
plt.fill_between(df['timestamp'], df['bb_upper'], df['bb_lower'], label = 'Bollinger bands', color = 'lightgrey')
plt.legend()
plt.show()

#calculate the RSI
df['rsi'] = ta.rsi(df['close'], length = 6)
df.tail()

#plot RSI on the graph
plt.figure(figsize=(15,8))

plt.plot(df['timestamp'], df['rsi'], label = 'RSI')
plt.axhline(30, linestyle = '--', color = 'orange')
plt.axhline(70, linestyle = '--', color = 'orange')
plt.legend()
plt.show()

#All indicators in one place
plt.figure(figsize=(14,8))
plt.plot(df['timestamp'], df['close'], label = 'Close')
plt.plot(df['timestamp'], df['ma_20'], label = 'Moving average')
#plt.plot(df['timestamp'], df['bb_upper'], df['bb_lower'], label = 'Bollinger band')
plt.fill_between(df['timestamp'], df['bb_upper'], df['bb_lower'], label = 'Bollinger bands', color = 'lightgrey')
plt.plot(df['timestamp'], df['rsi'], label = 'RSI')
plt.axhline(30, linestyle = '--', color = 'orange')
plt.axhline(70, linestyle = '--', color = 'orange')
plt.legend()
plt.show()

#Setting up BUY and SELL signals
#If RSI < 30 and price less than lower bollinger - BUY next day
#If RSI > 70 and price above upper bollinger - SELL next day

df['signal'] = np.where((df['rsi'] < 30) & (df['close'] < df['bb_lower']), 1, 0)
df['signal'] = np.where((df['rsi'] > 70) & (df['close'] > df['bb_upper']), -1, df['signal'])

#BUY/SELL the next day
df['signal'] = df['signal'].shift()
df['signal'] = df['signal'].fillna(0)
df.tail(20)

#Backtesting
def backtest(df):
  position = 0
  net_profit = 0
  percentageChange = []
  df['buy_date'] = ''
  df['sell_date'] = ''

  for i in range(len(df)):
    if df['signal'][i] == 1:
      if position == 0:
        position = 1
        buy_price = df['close'][i]
        buy_date = df['timestamp'][i]
        print("Buying at " + str({buy_price}) + "on" +  str({buy_date}))

    elif df['signal'][i] == -1:
      if position == 1:
        position = 0
        sell_price = df['close'][i]
        sell_date = df['timestamp'][i]
        bought = 0
        print("Selling at " +  str({sell_price}) + "on" + str({sell_date}))

        percentageChange.append((sell_price - buy_price) / buy_price * 100)
        net_profit += (sell_price - buy_price)

  gains = 0
  losses = 0
  no_gains = 0
  no_losses = 0
  totalRet = 1
  net_gains = 0
  avg_gain = 0
  avg_loss = 0
  win_rate = 0


  for i in percentageChange:
    if i > 0:
      gains += i
      no_gains += 1
    else:
      losses += i
      no_losses += 1
    totalRet = totalRet * ((i / 100) + 1)
    #totalRet = round(totalRet, 2)

  totalRet = (totalRet - 1) * 100



  if(no_gains > 0):
    avg_gain = gains / no_gains
  else:
    avg_gain = "undefined"

  if(no_losses > 0):
    avg_loss = losses / no_losses
  else:
    avg_loss = "undefined"

  if(no_gains > 0 and no_losses > 0):
    win_rate = (no_gains / (no_losses + no_gains))*100
  else:
    win_rate = 0

  print()
  print("--------------------METRICS-------------------")
  print("Total Trades = " + str({no_gains + no_losses}))
  print("Win Rate = " + str({win_rate}))
  print("Total Return = " + str({totalRet}))
  print("Win rate = " + str({win_rate}))
  print("----------------------------------------------")
  print()

backtest(df)