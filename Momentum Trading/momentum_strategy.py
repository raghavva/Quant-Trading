# -*- coding: utf-8 -*-
"""Momentum Strategy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hYSu-EnoR-eIuZIo2Pbi7LP2G-M0PTuy
"""

#Using Donchain Channel
#Buy when it hits X days low , sell when it hits x days high
#Follow the trend perspective

!pip install pandas_ta

!pip install backtesting

import pandas as pd
import pandas_ta as ta
import requests
import numpy as np
import matplotlib.pyplot as plt
import datetime as dt
import backtesting as bt
import math

key = 'GTVYSR9SUZQ0NJMI'

#url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=TSLA&outputsize=full&apikey={key}&datatype=csv'
url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=AAPL&outputsize=full&apikey={key}&datatype=csv'

df = pd.read_csv(url)
df = pd.DataFrame(df)
display(df.head())

df_dup = df.copy()
df_dup['timestamp'] = pd.to_datetime(df_dup['timestamp'])
df_dup.set_index('timestamp', inplace = True)
df_dup.tail()

#convert timestamp field to datetime field
df['timestamp'] = pd.to_datetime(df['timestamp'])
df.tail()

df = df[df['timestamp'] >= dt.datetime(2018,1,1)]
df.tail()

df[['dlower','dmid','dupper']] = df.ta.donchian(lower_length = 40, upper_length = 40).dropna()
df.tail()

df = df[::-1]
df.reset_index(drop = True, inplace = True)
df.head()

df.set_index('timestamp', inplace = True)
df.head()

plt.figure(figsize = (12,6))
plt.plot(df['close'], label = 'Close')
plt.plot(df['dlower'], color = 'black', label = 'DCL,DCU', linestyle = '--', alpha = 0.3)
plt.plot(df['dmid'], color = 'orange', label = 'DCM')
plt.plot(df['dupper'], color = 'black',  linestyle = '--', alpha = 0.3)
plt.title('Donchian Channel')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

#If price is lower than donchian channel then BUY and price greater than donchain then SELL.

def backtesting_strategy(df, investment):
  position = False
  equity = investment
  x = 0

  for i in range (2, len(df)):

    #if df['high'][i] >= df['dupper'][i] and position == False:
    if df['low'][i] <= df['dlower'][i] and position == False:
      no_of_shares = math.floor(equity/df['close'][i])
      equity = equity - (no_of_shares * df['close'][i])
      position = True
      print("Trade - " + str(x) + " - Buying at " + str(df['close'][i]) + " on " + str(df.index[i]) + " for " + str(no_of_shares) + " shares")
      x = x + 1

    #elif df['low'][i] <= df['dlower'][i] and position == True:
    elif df['high'][i] >= df['dupper'][i] and position == True:
      equity = equity + (no_of_shares * df['close'][i])
      position = False
      print("Trade - " + str(x) + " - Selling at " + str(df['close'][i]) + " on " + str(df.index[i]) + " for " + str(no_of_shares) + " shares")
      x = x + 1
      print("Investment after Trade " + str(x) + " = " + str(equity))
      print("\n")

  if position == True:
    equity = equity + (no_of_shares * df['close'][i])
    position = False
    print("Trade - " + str(x) + " - Selling at " + str(df['close'][i]) + " on " + str(df.index[i]) + " for " + str(no_of_shares) + " shares")
    print("Investment after Trade " + str(x) + " = " + str(equity))
    print("\n")

  earning = round(equity - investment, 2)
  roi = round((earning/investment) * 100, 2)
  print("Earning = " + str(earning))
  print("ROI = " + str(roi))

backtesting_strategy(df, 200)